service: griffin-record-service
plugins:
  - serverless-dotenv-plugin

useDotenv: true


provider:
  name: aws
  memorySize: 128
  runtime: nodejs18.x
  environment:
    RECORD_TABLE: !Ref RecordTable
    RECORD_REQUEST_TABLE: !ImportValue RecordRequestTable
    AWS_REGION_T: !Ref AWS::Region
    RequestRequestTable: ${param:recordRequestTable}
    RecordStatusesTable: !Ref RecordStatuses
    RecordAutoRecordTable: !Ref RecordAutoRecordTable
    DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
    DISCORD_CHANNEL_ID: ${env:DISCORD_CHANNEL_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
      - ecs:RunTask
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordRequestTable/index/username-index"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: !ImportValue RecordRequestTableArn
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: !GetAtt RecordTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordTable/index/username-index"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordTable/index/record-request-id-index"
    - Effect: Allow
      Action:
        - cloudformation:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: !GetAtt RecordStatuses.Arn
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordStatuses/index/record-request-id-index"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordAutoRecordTable/index/date-index"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:574134043875:table/RecordAutoRecordTable/index/record-request-id-index"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: !GetAtt RecordAutoRecordTable.Arn


resources:
  Outputs:
    RecordBucket:
      Value: !Ref RecordInputBucket
      Export:
        Name: RecordInputBucket
    AutoRecordTable:
      Value: !Ref RecordAutoRecordTable
      Export:
        Name: RecordAutoRecordTable
    AutoRecordTableArn:
      Value: !GetAtt RecordAutoRecordTable.Arn
      Export:
        Name: RecordAutoRecordTableArn
  Resources:
    ECRRecordRepository:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: griffin-record
    EcsDownloadCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: griffin-record-cluster
    RecordInputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: griffin-record-input
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000
    RecordStatuses:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RecordStatuses
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: recordrequestid
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: record-request-id-index
            KeySchema:
              - AttributeName: recordrequestid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    
    RecordAutoRecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RecordAutoRecordTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: recordrequestid
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: date-index
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: record-request-id-index
            KeySchema:
              - AttributeName: recordrequestid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    RecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RecordTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: recordrequestid
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: record-request-id-index
            KeySchema:
              - AttributeName: recordrequestid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST


functions:
  OnUploadInputBucket:
    handler: onUploadInputBucket.handler
    events:
      - s3:
          bucket: !Ref RecordInputBucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .mp4
  GetRecordingByRecordId:
    handler: getRecordingByRecordId.handler
    events:
      - http:
          path: /GetRecordingByRecordId/{id}
          method: get
          cors: true
  GetAllRecordStatusesByRequestID:
    handler: getAllRecordStatusesByRequestId.handler
    events:
      - http:
          path: /GetAllRecordStatusesByRequestID/{requestId}
          method: get
          cors: true
  GetRecordStatusById:
    handler: getRecordStatusById.handler
    events:
      - http:
          path: /GetRecordStatusById/{id}
          method: get
          cors: true
  GetAllRecordingsByRequestID:
    handler: getAllRecordingsByRequestID.handler
    events:
      - http:
          path: /GetAllRecordingsByRequestID/{requestId}
          method: get
          cors: true
          
  RecordCompleteCallback:
    handler: completeCallback.handler
    events:
      - http:
          path: /RecordCompleteCallback
          method: post
          cors: true
  RecordByRequestIDAdhoc:
    handler: RecordByRequestIDAdhoc.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ecs:*
        Resource: "*"
    events:
      - http:
          path: /RecordByRequestIDAdhoc/{requestid}
          method: post
          cors: true
      
  CallBackReceivedLiveEvents:
    handler: CallBackReceivedLiveEvents.handler
    events:
      - http:
          path: /CallBackReceivedLiveEvents
          method: post
          cors: true